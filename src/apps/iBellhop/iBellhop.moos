ProcessConfig = iBellhop
{
  common {  # Configuration common to all Goby MOOS applications 
            # (opt)
    log: true  # Should we write a text log of the terminal 
               # output? (opt) (default=true) (can also set MOOS 
               # global "log=")
    log_path: "./"  # Directory path to write the text log of the 
                    # terminal output (if log=true) (opt) 
                    # (default="./") (can also set MOOS global 
                    # "log_path=")
    community: "AUV23"  # The vehicle's name (opt) (can also set 
                        # MOOS global "Community=")
    lat_origin: 42.5  # Latitude in decimal degrees of the local 
                      # cartesian datum (opt) (can also set MOOS 
                      # global "LatOrigin=")
    lon_origin: 10.9  # Longitude in decimal degrees of the local 
                      # cartesian datum (opt) (can also set MOOS 
                      # global "LongOrigin=")
    app_tick: 10  # Frequency at which to run Iterate(). (opt) 
                  # (default=10)
    comm_tick: 10  # Frequency at which to call into the MOOSDB 
                   # for mail. (opt) (default=10)
    verbosity: VERBOSITY_VERBOSE  # Verbosity of the terminal 
                                  # window output (VERBOSITY_QUIET, 
                                  # VERBOSITY_WARN, 
                                  # VERBOSITY_VERBOSE, 
                                  # VERBOSITY_DEBUG, VERBOSITY_GUI) 
                                  # (opt) 
                                  # (default=VERBOSITY_VERBOSE)
    initializer {  # Publish a constant value to the MOOSDB at 
                   # startup (repeat)
      type: INI_DOUBLE  # type of MOOS variable to publish 
                        # (INI_DOUBLE, INI_STRING) (req)
      moos_var: "SOME_MOOS_VAR"  # name of MOOS variable to 
                                 # publish to (req)
      global_cfg_var: "LatOrigin"  # Optionally, instead of 
                                   # giving `sval` or `dval`, give 
                                   # a name here of a global MOOS 
                                   # variable (one at the top of 
                                   # the file) whose contents 
                                   # should be written to 
                                   # `moos_var` (opt)
      dval: 3.454  # Value to write for type==INI_DOUBLE (opt)
      sval: "a string"  # Value to write for type==INI_STRING 
                        # (opt)
    }
  }
  initial_env {  # Environment used as a background for all 
                 # requests (req)
    title: "Environmental File"  # Title of this environmental 
                                 # file for your use (opt) 
                                 # (default="Environmental File")
    freq: 25000  # Hertz (opt) (default=25000)
    output {  # Parameters governing the output of BELLHOP (opt)
      type: INCOHERENT_PRESSURE  # Type of ray trace to perform 
                                 # and file to output(ARR, RAY, or 
                                 # SHD) (ARRIVAL_TIMES, EIGENRAYS, 
                                 # RAYS, COHERENT_PRESSURE, 
                                 # INCOHERENT_PRESSURE, 
                                 # SEMICOHERENT_PRESSURE) (opt) 
                                 # (default=INCOHERENT_PRESSURE)
    }
    surface {  # Parameters that model the sea surface (opt)
      medium {  #  (opt)
        type:   # The type of the medium (VACUUM, RIGID, 
                # HALF_SPACE) (opt)
        attenuation {  # Attenuation parameters of the medium; 
                       # only used for type == HALF_SPACE (opt)
          units:   # Must use same units for surface and bottom 
                   # attenuation (DB_PER_M_KHZ, PARAMETER_LOSS, 
                   # DB_PER_M, NEPERS_PER_M, Q_FACTOR, 
                   # DB_PER_WAVELENGTH) (opt)
          value:   #  (opt)
        }
        cp:   # The compressional speed (m/s) of the medium; only 
              # used for type == HALF_SPACE (opt)
        cs:   # The shear speed (m/s) of the medium; only used 
              # for type == HALF_SPACE (opt)
        density:   # Density in g/cm^3; only used for type == 
                   # HALF_SPACE (opt)
        depth:   # The depth of this medium interface (0 = 
                 # surface) (opt)
      }
    }
    water_column {  # Parameters that model the water column (opt)
      interpolation_type: CUBIC_SPLINE  # The method used to 
                                        # interpolate the discrete 
                                        # sound speed profile (SSP) 
                                        # points (CUBIC_SPLINE, 
                                        # C_LINEAR, N2_LINEAR) 
                                        # (opt) 
                                        # (default=CUBIC_SPLINE)
      use_attenuation: true  # Enable Thorpe volume attenuation 
                             # (opt) (default=true)
      sample {  #  (repeat)
        cp:   # The compressional speed at this point (opt)
        depth:   # The depth of this sample (positive, measured 
                 # from the surface) (opt)
      }
    }
    bottom {  # Parameters that model the sea floor (opt)
      medium {  #  (opt)
        type:   # The type of the medium (VACUUM, RIGID, 
                # HALF_SPACE) (opt)
        attenuation {  # Attenuation parameters of the medium; 
                       # only used for type == HALF_SPACE (opt)
          units:   # Must use same units for surface and bottom 
                   # attenuation (DB_PER_M_KHZ, PARAMETER_LOSS, 
                   # DB_PER_M, NEPERS_PER_M, Q_FACTOR, 
                   # DB_PER_WAVELENGTH) (opt)
          value:   #  (opt)
        }
        cp:   # The compressional speed (m/s) of the medium; only 
              # used for type == HALF_SPACE (opt)
        cs:   # The shear speed (m/s) of the medium; only used 
              # for type == HALF_SPACE (opt)
        density:   # Density in g/cm^3; only used for type == 
                   # HALF_SPACE (opt)
        depth:   # The depth of this medium interface (0 = 
                 # surface) (opt)
      }
    }
    sources {  # Parameters that determine acoustic "source(s)" 
               # in the ray trace (opt)
      number_in_depth:   # The number of sources vertically; 
                         # sources are all assumed to be at range 
                         # == 0 (opt)
      first {  # The position of the shallowest source (opt)
        depth:   #  (opt)
      }
      last {  # The position of the deepest source (opt)
        depth:   #  (opt)
      }
    }
    receivers {  # Parameters that determine the acoustic 
                 # "receiver(s)" in the ray trace (opt)
      number_in_depth:   # The number of receivers vertically 
                         # (opt)
      number_in_range:   # The number of receivers horizontally 
                         # (opt)
      first {  # The position of the shallowest source at the 
               # closest range (opt)
        depth:   #  (opt)
        range:   #  (opt)
      }
      last {  # The position of the deepest source at the 
              # furthest range (opt)
        depth:   #  (opt)
        range:   #  (opt)
      }
    }
    beams {  # Parameters that govern the beams used in the ray 
             # trace (opt)
      approximation_type:   # The method used to approximate the 
                            # finite element shape used in the ray 
                            # trace (GEOMETRIC, CARTESIAN, 
                            # RAY_CENTERED, GAUSSIAN) (opt)
      theta_min: -90  # The smallest ray angle used in the ray 
                      # trace. theta=0 is horizontal. (opt) 
                      # (default=-90)
      theta_max: 90  # The largest ray angle. theta=0 is 
                     # horizontal (opt) (default=90)
      number: 0  # The number of rays used (opt) (default=0)
    }
    adaptive_info {  # Not used in the BELLHOP ENV file, but used 
                     # by iBellhop to adaptively populate certain 
                     # fields of this message (opt)
      contact: ""  # The name of a contact (NAME= field in 
                   # NODE_REPORT) used to find  the `source` 
                   # position in the ray trace. (opt)
      ownship: ""  # The name of our vehicle (NAME= field in 
                   # NODE_REPORT). If omitted, the Community name 
                   # is used. This is used to find the `receiver` 
                   # position(s) in the ray trace (opt)
      read_shd: false  # Read the generated SHD file (if 
                       # applicable) and parse it into a list of TL 
                       # values. Currently used for the 
                       # BHV_AcommsDepth (opt) (default=false)
      auto_receiver_ranges: false  # If true, the 
                                   # `receiver.first.range` and 
                                   # `receiver.last.range` will be 
                                   # set automatically based on the 
                                   # current trajectory of the 
                                   # `ownship` and `contact` based 
                                   # on the lastest NODE_REPORT. 
                                   # The calculated window will be 
                                   # the predicted position from 
                                   # now until `look_ahead_seconds` 
                                   # in the future. (opt) 
                                   # (default=false)
      look_ahead_seconds: 60  # The number of seconds to look 
                              # ahead for when calculated receiver 
                              # ranges using `auto_receiver_ranges` 
                              # (opt) (default=60)
      auto_source_depth: false  # If true, set 
                                # `source.first.depth` based on the 
                                # position of `contact` (opt) 
                                # (default=false)
    }
  }
  moos_var_request: ""  # MOOS variable to listen for requests on 
                        # (opt)
  moos_var_response: ""  # MOOS variable to publish responses 
                         # (opt)
  output_env_dir: ""  # Directory to write generated ENV files in 
                      # (opt)
}
